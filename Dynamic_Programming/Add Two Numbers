###**_QUESTION_**
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

###**_SOLUTION_**
ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* p1 = l1;
        ListNode* p2 = l2;
        ListNode* temp = new ListNode();
        int carry = 0, sum = 0;
        
        while (p1 != NULL && p2 != NULL) {
            p1 = p1 -> next;
            p2 = p2 -> next;
        }
        
        if (p1 == NULL && p2 == NULL) {
            //length of l1 == l2
            p1 = l1;
            p2 = l2;
            while ((p1 -> next) != NULL) {
                sum = p1 -> val + p2 -> val + carry;
                
                if (sum >= 10) {
                    carry = sum / 10;
                    sum = sum - 10;
                } else {
                    carry = 0;
                }
                
                p2 -> val = sum;
                
                p1 = p1 -> next;
                p2 = p2 -> next;
            }
            
            sum = p1 -> val + p2 -> val + carry;
                
            if (sum >= 10) {
                carry = sum / 10;
                sum = sum - 10;
            } else {
                carry = 0;
            }

            p2 -> val = sum;
            
            if (carry != 0) {
                temp -> val = carry;
                temp -> next = NULL;
                p2 -> next = temp;
            }
            
            return l2;
            
        } else if (p1 == NULL) {
            //length of l1 < l2
            p1 = l1;
            p2 = l2;
            
            while(p1 != NULL) {
                sum = p1 -> val + p2 -> val + carry;
                
                if (sum >= 10) {
                    carry = sum / 10;
                    sum = sum - 10;
                } else {
                    carry = 0;
                }
                
                p2 -> val = sum;
                
                p1 = p1 -> next;
                p2 = p2 -> next;
            }
            
            while (carry != 0) {
                sum = p2 -> val + carry;
                
                if (sum >= 10) {
                    carry = sum / 10;
                    sum = sum - 10;
                } else {
                    carry = 0;
                }
                
                p2 -> val = sum;
                
                if ((p2 -> next) == NULL)
                    break;
                else
                    p2 = p2 -> next;
            }
            
            if ((p2 -> next) == NULL && carry != 0) {
                temp -> val = carry;
                temp -> next = NULL;
                p2 -> next = temp;
            }
            
            return l2;
        } else {
            //length of l1 > l2
            p1 = l1;
            p2 = l2;
            
            while(p2 != NULL) {
                sum = p1 -> val + p2 -> val + carry;
                
                if (sum >= 10) {
                    carry = sum / 10;
                    sum = sum - 10;
                } else {
                    carry = 0;
                }
                
                p1 -> val = sum;
                
                p1 = p1 -> next;
                p2 = p2 -> next;
            }
            
            while (carry != 0) {
                sum = p1 -> val + carry;
                
                if (sum >= 10) {
                    carry = sum / 10;
                    sum = sum - 10;
                } else {
                    carry = 0;
                }
                
                p1 -> val = sum;
                
                if ((p1 -> next) == NULL)
                    break;
                else
                    p1 = p1 -> next;
            }
            
            if ((p1 -> next) == NULL && carry != 0) {
                temp -> val = carry;
                temp -> next = NULL;
                p1 -> next = temp;
            }
            
            return l1;
        }        
    }
