###**_QUESTION_**
Given a string s and an array of strings words, return the number of words[i] that is a subsequence of s.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".

###**_SOLUTION_**
int numMatchingSubseq(string s, vector<string>& words) {
    int total =0;
    unordered_map<char,vector<int>> strmap;
    
    for (int i=0; i < s.length(); i++){
        strmap[s[i]].push_back(i);
    }
    
    for (int j=0; j < words.size(); j++) {
        string currword = words[j];
        int latest = -1;
        for (int k=0; k < currword.length(); k++) {
            auto it = upper_bound(m[curr[j]].begin(), m[curr[j]].end(), latest);
            
            if (it == m[curr[j]].end())
                break;
                
            latest = *it;
            
            if (j == currword.length() - 1)
                total++;
        }
    }
    return total;
}
